/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */
/* tslint:disable */

import '@stencil/core';


import {
  RendererOptions,
} from './components/ez-accordion/ez-accordion';
import {
  RendererOptions as RendererOptions2,
} from './components/ez-accordion/ez-accordion';


declare global {
  interface HTMLElement {
    componentOnReady?: () => Promise<this | null>;
  }

  interface HTMLStencilElement extends HTMLElement {
    componentOnReady(): Promise<this>;

    forceUpdate(): void;
  }

  interface HTMLAttributes {}

  namespace StencilComponents {

    interface EzAccordionBody {
      'isActive': boolean;
      'name': string;
      'renderer': (rendererOptions: RendererOptions) => void;
      'setStatus': (itemName: string, shouldSetAsActive: boolean) => void;
      'text': string;
      'toggleActive': (name: string) => void;
    }

    interface EzAccordionPage {

    }

    interface EzAccordionTitle {
      'isActive': boolean;
      'name': string;
      'renderer': (rendererOptions: RendererOptions) => void;
      'setStatus': (itemName: string, shouldSetAsActive: boolean) => void;
      'text': string;
      'toggleActive': (name: string) => void;
    }

    interface EzAccordion {
      'activeItems': string[];
      'activeItemsChangeIntercepter': (activeItems: string[], prevActiveItems: string[]) => string[];
      'renderer': (rendererOptions: RendererOptions) => void;
    }
  }


    interface HTMLEzAccordionBodyElement extends StencilComponents.EzAccordionBody, HTMLStencilElement {}

    var HTMLEzAccordionBodyElement: {
      prototype: HTMLEzAccordionBodyElement;
      new (): HTMLEzAccordionBodyElement;
    };
    

    interface HTMLEzAccordionPageElement extends StencilComponents.EzAccordionPage, HTMLStencilElement {}

    var HTMLEzAccordionPageElement: {
      prototype: HTMLEzAccordionPageElement;
      new (): HTMLEzAccordionPageElement;
    };
    

    interface HTMLEzAccordionTitleElement extends StencilComponents.EzAccordionTitle, HTMLStencilElement {}

    var HTMLEzAccordionTitleElement: {
      prototype: HTMLEzAccordionTitleElement;
      new (): HTMLEzAccordionTitleElement;
    };
    

    interface HTMLEzAccordionElement extends StencilComponents.EzAccordion, HTMLStencilElement {}

    var HTMLEzAccordionElement: {
      prototype: HTMLEzAccordionElement;
      new (): HTMLEzAccordionElement;
    };
    

  namespace JSX {
    interface Element {}
    export interface IntrinsicElements {
    'ez-accordion-body': JSXElements.EzAccordionBodyAttributes;
    'ez-accordion-page': JSXElements.EzAccordionPageAttributes;
    'ez-accordion-title': JSXElements.EzAccordionTitleAttributes;
    'ez-accordion': JSXElements.EzAccordionAttributes;
    }
  }

  namespace JSXElements {

    export interface EzAccordionBodyAttributes extends HTMLAttributes {
      'isActive'?: boolean;
      'name'?: string;
      'onRegisterChild'?: (event: CustomEvent) => void;
      'onUnregisterChild'?: (event: CustomEvent) => void;
      'renderer'?: (rendererOptions: RendererOptions) => void;
      'setStatus'?: (itemName: string, shouldSetAsActive: boolean) => void;
      'text'?: string;
      'toggleActive'?: (name: string) => void;
    }

    export interface EzAccordionPageAttributes extends HTMLAttributes {

    }

    export interface EzAccordionTitleAttributes extends HTMLAttributes {
      'isActive'?: boolean;
      'name'?: string;
      'onRegisterChild'?: (event: CustomEvent) => void;
      'onUnregisterChild'?: (event: CustomEvent) => void;
      'renderer'?: (rendererOptions: RendererOptions) => void;
      'setStatus'?: (itemName: string, shouldSetAsActive: boolean) => void;
      'text'?: string;
      'toggleActive'?: (name: string) => void;
    }

    export interface EzAccordionAttributes extends HTMLAttributes {
      'activeItems'?: string[];
      'activeItemsChangeIntercepter'?: (activeItems: string[], prevActiveItems: string[]) => string[];
      'renderer'?: (rendererOptions: RendererOptions) => void;
    }
  }

  interface HTMLElementTagNameMap {
    'ez-accordion-body': HTMLEzAccordionBodyElement
    'ez-accordion-page': HTMLEzAccordionPageElement
    'ez-accordion-title': HTMLEzAccordionTitleElement
    'ez-accordion': HTMLEzAccordionElement
  }

  interface ElementTagNameMap {
    'ez-accordion-body': HTMLEzAccordionBodyElement;
    'ez-accordion-page': HTMLEzAccordionPageElement;
    'ez-accordion-title': HTMLEzAccordionTitleElement;
    'ez-accordion': HTMLEzAccordionElement;
  }
}
declare global { namespace JSX { interface StencilJSX {} } }

export declare function defineCustomElements(window: any): void;